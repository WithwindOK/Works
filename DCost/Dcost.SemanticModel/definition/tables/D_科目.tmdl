table D_科目
	lineageTag: 3bc691a8-cab5-48bc-9200-cf62f3d61388

	measure 【级次】 = MAX('D_科目'[级次])
		formatString: 0
		lineageTag: 3229b2ce-3eff-4480-a015-458c4f940c90

	measure 【当前级次】 = ISINSCOPE('D_科目'[L1])+ISINSCOPE('D_科目'[L2])+ISINSCOPE('D_科目'[L3])+ISINSCOPE('D_科目'[L4])
		formatString: 0
		lineageTag: a55b0ed5-b213-4341-b557-59f2e0e03d79

	column KM1
		dataType: string
		lineageTag: 2903d90b-1a67-4eab-a51a-d0e1ffe42aa0
		summarizeBy: none
		sourceColumn: KM1

		annotation SummarizationSetBy = Automatic

	column KM2
		dataType: string
		lineageTag: 70eba99b-a7c5-4806-932c-24df7a570fe3
		summarizeBy: none
		sourceColumn: KM2

		annotation SummarizationSetBy = Automatic

	column KM3
		dataType: string
		lineageTag: d9e518c9-9a31-4654-aeb7-6c4595acedce
		summarizeBy: none
		sourceColumn: KM3

		annotation SummarizationSetBy = Automatic

	column KM4
		dataType: string
		lineageTag: c6ebc421-5a18-4b84-97ab-a6076674d14a
		summarizeBy: none
		sourceColumn: KM4

		annotation SummarizationSetBy = Automatic

	column 标准合同名称
		dataType: string
		lineageTag: 5d0d3065-9568-454e-88f6-9412a52adbfb
		summarizeBy: none
		sourceColumn: 标准合同名称

		annotation SummarizationSetBy = Automatic

	hierarchy 科目层次
		lineageTag: cc9a288f-54c3-4187-aa80-a171a61674d6

		level KM1
			lineageTag: 12ad0622-f547-4281-8c64-436c50cd1a07
			column: KM1

		level KM2
			lineageTag: 3e84f377-8a7a-4687-960a-29a66036ca83
			column: KM2

		level KM3
			lineageTag: e9992b9c-a89b-47ec-8c84-ba913afd4be2
			column: KM3

		level KM4
			lineageTag: d6e8e3cb-85c3-45bb-bc56-fc5753e732c9
			column: KM4

	partition D_科目 = m
		mode: import
		source =
				let
				    源 = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("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", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [KM1 = _t, KM2 = _t, KM3 = _t, KM4 = _t, 标准合同 = _t]),
				    替换的值2 = Table.ReplaceValue(源,"","同上",Replacer.ReplaceValue,{"KM3"}),
				    替换的值3 = Table.ReplaceValue(替换的值2,"","同上",Replacer.ReplaceValue,{"KM4"}),
				    替换的值 = Table.ReplaceValue(替换的值3,"《","",Replacer.ReplaceText,{"标准合同"}),
				    替换的值1 = Table.ReplaceValue(替换的值,"》","",Replacer.ReplaceText,{"标准合同"}),
				    已添加自定义 = Table.AddColumn(替换的值1, "标准合同名称", each Text.Split([标准合同],"、")),
				    删除的列 = Table.RemoveColumns(已添加自定义,{"标准合同"}),
				    #"展开的“标准合同名称”" = Table.ExpandListColumn(删除的列, "标准合同名称"),
				    更改的类型 = Table.TransformColumnTypes(#"展开的“标准合同名称”",{{"标准合同名称", type text}})
				in
				    更改的类型

	annotation PBI_NavigationStepName = 导航

	annotation PBI_ResultType = Table

